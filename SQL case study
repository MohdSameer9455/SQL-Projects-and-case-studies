--SQL Case study
use project;
select * from fact;
select * from location;
select * from product

--2) How many products are of regular type ?

select count(Type) Regular_products from Product#$
where Type='Regular';

--3) How much spending has been done on marketing of product id 1
select sum(Marketing)  marketing_amount from fact
where ProductId=1;

--4) What is the minimum sales of a product ?

select min(f.Sales)
from fact$ f
join Product p on p.ProductId=f.ProductId;

--5) Display max Cost of Good Sold(COGS)

select max(COGS) FROM fact$;

--6) Display the Details of the productid where product type is coffee

select f.*
from fact f
join product p on p.ProductId=f.ProductId
where p.[Product Type] ='Coffee';

--7) Display the details where total_expenses is greater than 40.

select * from fact
where [Total Expenses]>40;

--8) What is the average sales in Area_Code 719 ?

select avg(Sales) avg_sales from fact
where [Area Code]=719;

--9) Find out the total profit generated by Colorado state

select SUM(f.Profit) total_profit
from fact f
join location l on l.[Area Code]=F.[Area Code]
where l.State='Colorado';

--10) Display the average inventory for each product id

select avg(Inventory) avg_inventory,ProductId from fact
group by ProductId;

--11) Display state in a sequential order in a location table.

select * from location order by State;

--12) Display the average budget margin of the store where average budget margin should be
greater than 100.

select avg(f.[Budget Margin]) avg_budget_margin,l.State          
from fact f
join location l on l.[Area Code]=f.[Area Code]
group by l.State
having avg(f.[Budget Margin])>100

--13) What is the total sales done on date 2010-01-01

select sum(Sales) from fact where Date='2010-01-01'

--14) Display the average total expense of each product id on individual date

select avg([Total Expenses]) avg_total_expenses,ProductId,Date
from fact
group by ProductId,Date;

--15) Display the table with the following attributes such as
Date, productid, product_type, product, Sales, profit, state, area_code

select f.Date, f.ProductId, p.[Product Type], p.Product, f.Sales, f.Profit, l.State, l.[Area Code]
from product p
join fact f on f.ProductId=p.ProductId
join location l on l.[Area Code]=f.[Area Code];

--16) Display the rank without any gap to show the Sales wise rank.

select  dense_rank() over(order by Sales desc) rank_salary,* from fact;

--17) Find the State wise Profit and Sales

select l.State, sum(f.Profit) profit,sum(f.Sales) sales
from fact f
join location l on l.[Area Code]=f.[Area Code]
group by l.State;

--18) Find the State wise Profit and Sales along with the Product Name

select l.State, sum(f.Profit) profit,sum(f.Sales) sales,p.Product
from location l
join fact f on f.[Area Code]=l.[Area Code]
join product p on p.ProductId=f.ProductId
group by l.State,p.Product;

--19) If there is an increase in sales of 5%. Calculate the increased sales.

select *,(Sales*0.05)+Sales increasedsales from fact;


--20) Find the maximum profit along with the Product id and Product Type.

select max(f.Profit) max_profit,p.ProductId,p.[Product Type]
from fact f
join product p on p.ProductId=f.ProductId
group by p.ProductId,p.[Product Type];

--21) Create a Stored Procedure to fetch the result according to the product type from Product.

create procedure SP_res 
@prtype varchar(20)
as
begin
     select * from product where [Product Type]=@prtype
end

exec SP_res coffee

--22) Write a query by creating a condition in which if the total expenses is less than 60 then it is a
--profit or else loss.

select * ,
case 
     when [Total Expenses] < 60 then 'profit'
	 else 'loss'
end as prof_or_loss
from fact;

--23) Give the total weekly sales value with the Date and productid details. Use roll-up to pull the
data in hierarchical order

select sum(Sales) sales_per_week,DATEPART(week,Date) weeks,ProductId from fact
group by datepart(week,Date),Date,ProductId WITH ROLLUP;

--24) Apply union and intersection operator on the tables which consist of attribute area code.
select [Area Code] from fact
union
select [Area Code] from location

select [Area Code] from fact
INTERSECT
select [Area Code] from location

--25) Create a user-defined function for the product table to fetch a particular product type based
--upon the userâ€™s prefrences
create function 
select_prod(@type varchar(20))
returns table
as
return
(
 select * from product where Type=@type
)
end;
--26) Change the product type from coffee to tea where product id is 1 and undo it.

update product set [Product Type]=
case
when [Product Type]='Coffee' and  ProductId=1 then 'Tea'
end;
select * from product


--27) Display the Date, productid and sales where total expenses are between 100 to 200.

select Date,ProductId,Sales from fact
where [Total Expenses] between 100 and 200;

--28) Delete the records in the product table for regular type.

delete from product
where Type='Regular';
select * from product;
